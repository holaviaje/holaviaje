// <auto-generated />
using System;
using System.Collections.Generic;
using HolaViaje.Catalog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HolaViaje.Catalog.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HolaViaje.Catalog.Features.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LegalName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RegisteredIn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VatId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.ComplexProperty<Dictionary<string, object>>("BookInfo", "HolaViaje.Catalog.Features.Companies.Company.BookInfo#BookInfo", b1 =>
                        {
                            b1.Property<string>("Email")
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .HasColumnType("text");

                            b1.Property<string>("WhatsApp")
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Control", "HolaViaje.Catalog.Features.Companies.Company.Control#EntityControl", b1 =>
                        {
                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DeletedAt");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("IsDeleted");

                            b1.Property<DateTime>("LastModifiedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("LastModifiedAt");
                        });

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Experiences.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("InstantTicketDelivery")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("integer");

                    b.Property<bool>("MobileTicket")
                        .HasColumnType("boolean");

                    b.Property<bool>("PetsFrendly")
                        .HasColumnType("boolean");

                    b.Property<bool>("WheelchairAccessible")
                        .HasColumnType("boolean");

                    b.ComplexProperty<Dictionary<string, object>>("CancellationPolicy", "HolaViaje.Catalog.Features.Experiences.Experience.CancellationPolicy#CancellationPolicy", b1 =>
                        {
                            b1.Property<int>("DaysToCancel")
                                .HasColumnType("integer")
                                .HasColumnName("DaysToCancel");

                            b1.Property<int>("Policy")
                                .HasColumnType("integer")
                                .HasColumnName("CancellationPolicyType");

                            b1.Property<int>("RefundPercentage")
                                .HasColumnType("integer")
                                .HasColumnName("RefundPercentage");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Control", "HolaViaje.Catalog.Features.Experiences.Experience.Control#EntityControl", b1 =>
                        {
                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DeletedAt");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("IsDeleted");

                            b1.Property<DateTime>("LastModifiedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("LastModifiedAt");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "HolaViaje.Catalog.Features.Experiences.Experience.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("Days")
                                .HasColumnType("integer");

                            b1.Property<int?>("Hours")
                                .HasColumnType("integer");

                            b1.Property<int?>("Minutes")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Experiences.ExperienceTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationPolicyDetails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CancellationPolicyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImportantInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LiveGuide")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PetsPolicyDetails")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WhatToExpect")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId", "LanguageCode")
                        .IsUnique();

                    b.ToTable("ExperienceTranslations", (string)null);
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Companies.Company", b =>
                {
                    b.OwnsMany("HolaViaje.Catalog.Features.Companies.Manager", "Managers", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("ManageAll")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ManageExperiences")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("CompanyManagers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Experiences.Experience", b =>
                {
                    b.OwnsMany("HolaViaje.Catalog.Shared.Photo", "Photos", b1 =>
                        {
                            b1.Property<string>("FileId")
                                .HasMaxLength(38)
                                .HasColumnType("character varying(38)");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.HasKey("FileId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperiencePhotos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Experiences.ExperienceTranslation", b =>
                {
                    b.HasOne("HolaViaje.Catalog.Features.Experiences.Experience", "Experience")
                        .WithMany("Translations")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HolaViaje.Catalog.Features.Experiences.ExperienceMapPoint", "EndPoint", b1 =>
                        {
                            b1.Property<Guid>("ExperienceTranslationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Latitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Longitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("RecordId")
                                .HasColumnType("uuid");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Time")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("ExperienceTranslationId");

                            b1.ToTable("ExperienceTranslations");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceTranslationId");
                        });

                    b.OwnsOne("HolaViaje.Global.Shared.MapPoint", "Place", b1 =>
                        {
                            b1.Property<Guid>("ExperienceTranslationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Latitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Longitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("ExperienceTranslationId");

                            b1.ToTable("ExperienceTranslations");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceTranslationId");
                        });

                    b.OwnsOne("HolaViaje.Catalog.Features.Experiences.ExperienceMapPoint", "TicketRedemptionPoint", b1 =>
                        {
                            b1.Property<Guid>("ExperienceTranslationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Latitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Longitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("RecordId")
                                .HasColumnType("uuid");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Time")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("ExperienceTranslationId");

                            b1.ToTable("ExperienceTranslations");

                            b1.WithOwner()
                                .HasForeignKey("ExperienceTranslationId");
                        });

                    b.OwnsMany("HolaViaje.Catalog.Features.Experiences.ExperienceService", "Services", b1 =>
                        {
                            b1.Property<Guid>("RecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<bool>("Included")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("RecordId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperienceServices", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("HolaViaje.Catalog.Features.Experiences.ExperienceStop", "Stops", b1 =>
                        {
                            b1.Property<Guid>("RecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("AdmissionTicket")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("StopOrder")
                                .HasColumnType("integer");

                            b1.Property<string>("Title")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("RecordId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperienceStops", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");

                            b1.OwnsOne("HolaViaje.Global.Shared.MapPoint", "Place", b2 =>
                                {
                                    b2.Property<Guid>("ExperienceStopRecordId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Address")
                                        .HasMaxLength(200)
                                        .HasColumnType("character varying(200)");

                                    b2.Property<string>("City")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Country")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Latitude")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("Longitude")
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("State")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("ZipCode")
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)");

                                    b2.HasKey("ExperienceStopRecordId");

                                    b2.ToTable("ExperienceStops");

                                    b2.WithOwner()
                                        .HasForeignKey("ExperienceStopRecordId");
                                });

                            b1.OwnsOne("HolaViaje.Catalog.Shared.Duration", "Duration", b2 =>
                                {
                                    b2.Property<Guid>("ExperienceStopRecordId")
                                        .HasColumnType("uuid");

                                    b2.Property<int?>("Days")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("Hours")
                                        .HasColumnType("integer");

                                    b2.Property<int?>("Minutes")
                                        .HasColumnType("integer");

                                    b2.HasKey("ExperienceStopRecordId");

                                    b2.ToTable("ExperienceStops");

                                    b2.WithOwner()
                                        .HasForeignKey("ExperienceStopRecordId");
                                });

                            b1.Navigation("Duration")
                                .IsRequired();

                            b1.Navigation("Place")
                                .IsRequired();
                        });

                    b.OwnsMany("HolaViaje.Catalog.Features.Experiences.ExperienceMapPoint", "MeetingPoints", b1 =>
                        {
                            b1.Property<Guid>("RecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Latitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Longitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Time")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("RecordId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperienceMeetingPoints", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("HolaViaje.Catalog.Features.Experiences.ExperienceMapPoint", "PickupPoints", b1 =>
                        {
                            b1.Property<Guid>("RecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Details")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Latitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Longitude")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Time")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.HasKey("RecordId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperiencePickupPoints", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("HolaViaje.Catalog.Shared.AdditionalInfo", "AdditionalInfos", b1 =>
                        {
                            b1.Property<Guid>("RecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.HasKey("RecordId");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("ExperienceAdditionalInfos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("AdditionalInfos");

                    b.Navigation("EndPoint");

                    b.Navigation("Experience");

                    b.Navigation("MeetingPoints");

                    b.Navigation("PickupPoints");

                    b.Navigation("Place")
                        .IsRequired();

                    b.Navigation("Services");

                    b.Navigation("Stops");

                    b.Navigation("TicketRedemptionPoint");
                });

            modelBuilder.Entity("HolaViaje.Catalog.Features.Experiences.Experience", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
